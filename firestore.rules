rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection rules
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null; // Allow all authenticated users to read other users' basic info
      
      // Allow users to update their online status and last seen
      allow update: if request.auth != null 
        && request.auth.uid == userId
        && request.resource.data.keys().hasOnly(['isOnline', 'lastSeen'])
        && request.resource.data.isOnline is bool
        && request.resource.data.lastSeen is timestamp;
    }
    
    // Messages collection rules
    match /messages/{messageId} {
      // Allow authenticated users to read all messages
      allow read: if request.auth != null;
      
      // Allow users to create messages with their own user ID
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.senderId
        && request.resource.data.keys().hasAll(['senderId', 'senderName', 'senderEmail', 'content', 'createdAt', 'type'])
        && request.resource.data.senderId == request.auth.uid
        && request.resource.data.senderName is string
        && request.resource.data.senderEmail is string
        && request.resource.data.content is string
        && request.resource.data.createdAt is timestamp
        && request.resource.data.type is string;
      
      // Allow users to update only messages they sent (for marking as read, etc.)
      allow update: if request.auth != null 
        && request.auth.uid == resource.data.senderId;
      
      // Prevent deletion of messages
      allow delete: if false;
    }
    
    // Chat rooms collection (for future use)
    match /chatRooms/{roomId} {
      allow read, write: if request.auth != null;
      
      match /messages/{messageId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null 
          && request.auth.uid == request.resource.data.senderId;
        allow update: if request.auth != null 
          && request.auth.uid == resource.data.senderId;
        allow delete: if false;
      }
    }
  }
}
